name: Java CI with Gradle

on:
  push:
    branches:
      - feature/etc
  pull_request:
    branches:
      - feature/etc

permissions:
  contents: read

jobs:
  build:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:latest
        ports:
          - "6379:6379"

    steps:
      - uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Install Docker Compose
        run: |
          mkdir -p $HOME/.local/bin
          curl -L "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o $HOME/.local/bin/docker-compose
          chmod +x $HOME/.local/bin/docker-compose
          echo 'export PATH=$PATH:$HOME/.local/bin' >> $HOME/.bashrc  # or $HOME/.zshrc for Zsh
          source $HOME/.bashrc  # or source $HOME/.zshrc for Zsh
          sudo usermod -aG docker $USER  # Add the GitHub Actions user to the docker group
          newgrp docker  # Activate the changes to groups without logging out

      - name: Make application.yml
        run: |
          # Delete existing application.properties if it exists
          rm -f ./src/main/resources/application.properties

          # Create application.yml
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
          
          # Secrets에 저장한 값을 application.yml 파일에 쓰기
          echo "${{ secrets.APPLICATION_INFO }}" >> ./src/main/resources/application.properties
        shell: bash

      - name: Build with Gradle
        run: ./gradlew bootJar

      - name: Web Docker Build and Push
        run: |
          docker login -u ${{ secrets.DOCKERHUB_USERNAME }} -p ${{ secrets.DOCKERHUB_PASSWORD }}
          
          # 이미지가 존재하면 삭제
          docker image rm -f ${{ secrets.DOCKER_REPO }} || true
          
          docker build -t ${{ secrets.DOCKER_REPO }} .
          docker push ${{ secrets.DOCKER_REPO }}

      - name: 원격 SSH 명령 실행
        uses: appleboy/ssh-action@v0.1.6
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.KEY }}
          port: 22
          script: |
            # 8080 포트를 사용 중인 도커 컨테이너 확인
            sleep 10 # 10초 동안 대기
            RUNNING_CONTAINER=$(docker ps -q -f "expose=8080" --filter "name=${{ secrets.DOCKER_CONTAINER_NAME }}")

            # 해당 도커 컨테이너가 실행 중이면 중지 및 삭제
            if [ -n "$RUNNING_CONTAINER" ]; then
              sudo docker stop ${{ secrets.DOCKER_CONTAINER_NAME }}
              sudo docker rm ${{ secrets.DOCKER_CONTAINER_NAME }}
            fi

            # 새로운 도커 이미지 pull 및 실행
            sudo docker pull ${{ secrets.DOCKER_REPO }}
            sudo docker-compose -f docker-compose.yml up -d